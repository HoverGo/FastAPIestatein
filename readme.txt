Модели (models):
Отвечают за модели SQLAlchemy

Репозитории (repositories):
Содержит в себе сущности (данные из базы), может их фильтровать и возвращать

Схемы (schemas):
Pydantic классы, схемы, модели

Сервисы (services):
Основная часть обработки данных бизнес-логики. Взаимодействуют с репозиториями. 
Передают данные в контроллеры.

Контроллеры:
routers.py - отвечает за эндпоинты. Отвечает за функционал запрос-ответ по API. Не должны иметь бизнес-логики. 
Передают данные в сервисы.

Возможно использование паттерна UoW:
UoW - класс, объединяющий репозитории.
Паттерн Unit of Work помогает упростить работу с различными репозиториями и дает уверенность, что все репозитории будут использовать один и тот же DbContext.
Так же использование паттерна Репозиторий и UoW позволяет создать правильную структуру для развертывания приложения и внедрения DI, которые как минимум помогают в тестировании проекта.


start server - uvicorn main:app --reload